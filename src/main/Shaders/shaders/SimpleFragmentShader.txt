#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[3];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[3];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 lightAttenuation[3];

void main(){

//LIGHT AND SPECULAR

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for (int i = 0 ; i < 3 ; i++){
        float distance = length(toLightVector[i]);
        float attenuationFactor = lightAttenuation[i].x + (lightAttenuation[i].y * distance) + (lightAttenuation[i].z * distance * distance);

        vec3 unitLightVector = normalize(toLightVector[i]);

        float dotProd1 = dot(unitNormal, unitLightVector);
        float brightness = max(dotProd1, 0.0);

        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor,0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attenuationFactor;
        totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attenuationFactor;
    }
    totalDiffuse = max(totalDiffuse, 0.0);

//FINAL COLOR OUTPUT

    out_Color = vec4(totalDiffuse,1.0) *  texture(textureSampler, pass_textureCoordinates) + vec4(totalSpecular,1.0);
    out_Color = mix(vec4(skyColor,1.0),out_Color, visibility);

    //out_Color = vec4(color,1.0);

}