#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[3];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor[3];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 lightAttenuation[3];

void main(){

//MultiTexturing

    vec4 blendMapColor = texture(blendMap, pass_textureCoordinates);
    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);

    vec2 tiledCoords = pass_textureCoordinates * 40; //still dont understand why 40
    vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;

    vec4 totalTextureColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

//Lightning and Specular

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

   for(int i = 0 ; i < 3 ; i++){
        float distance = length(toLightVector[i]);
        float attenuationFactor = lightAttenuation[i].x + (lightAttenuation[i].y * distance) + (lightAttenuation[i].z * distance * distance);

        vec3 unitLightVector = normalize(toLightVector[i]);

        float dotProd1 = dot(unitNormal, unitLightVector);
        float brightness = max(dotProd1, 0.4);

        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor,0.1) * 0.2;
        float dampedFactor = pow(specularFactor, shineDamper);

        totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attenuationFactor;
        totalSpecular = totalSpecular + (reflectivity * dampedFactor * lightColor[i])/attenuationFactor;
    }

//Color output

    out_Color = vec4(totalDiffuse,1.0) * totalTextureColor + vec4(totalSpecular,1.0);
    out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);

}